apiVersion: v1
kind: Service
metadata:
  name: executor-1
  labels:
    app: executor
    instance: executor-1
spec:
  ports:
  - port: 8083
    name: http
  selector:
    app: executor
    instance: executor-1
---
apiVersion: v1
kind: Service
metadata:
  name: executor-2
  labels:
    app: executor
    instance: executor-2
spec:
  ports:
  - port: 8083
    name: http
  selector:
    app: executor
    instance: executor-2
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: executor-1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: executor
      instance: executor-1
  template:
    metadata:
      labels:
        app: executor
        instance: executor-1
    spec:
      containers:
      - name: executor
        image: ${ECR_REGISTRY}/${PROJECT_NAME}/executor:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8083
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: LOG_LEVEL
          value: "INFO"
        - name: DOCKER_HOST
          value: "tcp://docker-proxy:2375"
        - name: REDIS_HOST
          value: "redis"
        - name: REDIS_PORT
          value: "6379"
        - name: HEALTH_CHECK_URL
          value: "http://localhost:8083/health"
        - name: MAX_CONCURRENT_EXECUTIONS
          value: "1"
        - name: EXECUTOR_IMAGE
          value: "${ECR_EXECUTOR_ML_IMAGE:-executor-ml:latest}"
        resources:
          requests:
            memory: "128Mi"
            cpu: "250m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - python
            - /healthcheck.py
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - python
            - /healthcheck.py
          initialDelaySeconds: 10
          periodSeconds: 10
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - SYS_ADMIN  # Required for container management
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      securityContext:
        seccompProfile:
          type: Unconfined  # Needed for Docker-in-Docker
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: executor-2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: executor
      instance: executor-2
  template:
    metadata:
      labels:
        app: executor
        instance: executor-2
    spec:
      containers:
      - name: executor
        image: ${ECR_REGISTRY}/${PROJECT_NAME}/executor:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8083
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: LOG_LEVEL
          value: "INFO"
        - name: DOCKER_HOST
          value: "tcp://docker-proxy:2375"
        - name: REDIS_HOST
          value: "redis"
        - name: REDIS_PORT
          value: "6379"
        - name: HEALTH_CHECK_URL
          value: "http://localhost:8083/health"
        - name: MAX_CONCURRENT_EXECUTIONS
          value: "1"
        - name: EXECUTOR_IMAGE
          value: "${ECR_EXECUTOR_ML_IMAGE:-executor-ml:latest}"
        resources:
          requests:
            memory: "128Mi"
            cpu: "250m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - python
            - /healthcheck.py
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - python
            - /healthcheck.py
          initialDelaySeconds: 10
          periodSeconds: 10
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - SYS_ADMIN  # Required for container management
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      securityContext:
        seccompProfile:
          type: Unconfined  # Needed for Docker-in-Docker