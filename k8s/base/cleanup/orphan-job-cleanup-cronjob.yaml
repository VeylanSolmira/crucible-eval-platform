apiVersion: batch/v1
kind: CronJob
metadata:
  name: orphan-job-cleanup
  namespace: crucible
spec:
  schedule: "*/5 * * * *"  # Every 5 minutes
  concurrencyPolicy: Forbid  # Don't run if previous is still running
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: job-cleanup  # Needs permissions to list/delete jobs
          containers:
          - name: cleanup
            image: crucible-platform/api:latest  # Reuse API image for now
            command:
            - python
            - -c
            - |
              import os
              import sys
              sys.path.append('/app')
              from kubernetes import client, config
              from shared.storage_client import StorageClient
              import logging
              
              logging.basicConfig(level=logging.INFO)
              logger = logging.getLogger(__name__)
              
              # Load in-cluster config
              config.load_incluster_config()
              batch_v1 = client.BatchV1Api()
              
              storage = StorageClient(base_url=os.getenv('STORAGE_SERVICE_URL', 'http://storage-service:8082'))
              
              # Get all evaluation jobs
              jobs = batch_v1.list_namespaced_job(
                  namespace='crucible',
                  label_selector='app=evaluation'
              )
              
              orphaned_count = 0
              for job in jobs.items:
                  eval_id = job.metadata.labels.get('eval-id')
                  if not eval_id:
                      continue
                  
                  try:
                      # Check evaluation status
                      eval_data = storage.get_evaluation(eval_id)
                      status = eval_data.get('status')
                      
                      # If evaluation is terminal but job exists, it's orphaned
                      if status in ['cancelled', 'failed', 'completed']:
                          logger.warning(f"Found orphaned job {job.metadata.name} for {status} evaluation {eval_id}")
                          
                          # Delete the job
                          batch_v1.delete_namespaced_job(
                              name=job.metadata.name,
                              namespace='crucible',
                              propagation_policy='Background'
                          )
                          orphaned_count += 1
                          logger.info(f"Deleted orphaned job {job.metadata.name}")
                          
                  except Exception as e:
                      logger.error(f"Error checking job {job.metadata.name}: {e}")
              
              logger.info(f"Cleanup complete. Found and deleted {orphaned_count} orphaned jobs.")
            env:
            - name: STORAGE_SERVICE_URL
              value: "http://storage-service:8082"
            - name: PYTHONPATH
              value: "/app"
            resources:
              requests:
                cpu: "50m"
                memory: "64Mi"
              limits:
                cpu: "100m"
                memory: "128Mi"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: job-cleanup
  namespace: crucible
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: job-cleanup
  namespace: crucible
rules:
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["list", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: job-cleanup
  namespace: crucible
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: job-cleanup
subjects:
- kind: ServiceAccount
  name: job-cleanup
  namespace: crucible