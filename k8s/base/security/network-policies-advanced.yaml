# Advanced Network Policies for Zero-Trust Networking
# These policies implement strict service-to-service communication rules
#
# Default deny all traffic in the namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
# Allow DNS for all pods (required for service discovery)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns-access
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
---
# API Service network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-service-network-policy
spec:
  podSelector:
    matchLabels:
      app: api-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow from ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  # Allow from other services in namespace
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/part-of: crucible-platform
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow to storage service
  - to:
    - podSelector:
        matchLabels:
          app: storage-service
    ports:
    - protocol: TCP
      port: 8082
  # Allow to dispatcher service
  - to:
    - podSelector:
        matchLabels:
          app: dispatcher
    ports:
    - protocol: TCP
      port: 8090
  # Allow to Redis
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  # Allow to PostgreSQL
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
---
# Storage Service network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: storage-service-network-policy
spec:
  podSelector:
    matchLabels:
      app: storage-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow from API service
  - from:
    - podSelector:
        matchLabels:
          app: api-service
    ports:
    - protocol: TCP
      port: 8082
  # Allow from storage worker
  - from:
    - podSelector:
        matchLabels:
          app: storage-worker
    ports:
    - protocol: TCP
      port: 8082
  # Allow from Celery workers
  - from:
    - podSelector:
        matchLabels:
          app: celery-worker
    ports:
    - protocol: TCP
      port: 8082
  egress:
  # Allow to PostgreSQL
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  # Allow to Redis (for caching)
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
---
# Redis network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-network-policy
spec:
  podSelector:
    matchLabels:
      app: redis
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow from all platform services
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/part-of: crucible-platform
    ports:
    - protocol: TCP
      port: 6379
  egress:
  # Redis doesn't need outbound connections
  - to:
    - podSelector: {}
    ports: []
---
# PostgreSQL network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: postgres-network-policy
spec:
  podSelector:
    matchLabels:
      app: postgres
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow from storage service and migration jobs
  - from:
    - podSelector:
        matchLabels:
          app: storage-service
    ports:
    - protocol: TCP
      port: 5432
  - from:
    - podSelector:
        matchLabels:
          app: storage-worker
    ports:
    - protocol: TCP
      port: 5432
  - from:
    - podSelector:
        matchLabels:
          job-name: postgres-migration
    ports:
    - protocol: TCP
      port: 5432
  egress:
  # PostgreSQL doesn't need outbound connections
  - to:
    - podSelector: {}
    ports: []
---
# Celery worker network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: celery-worker-network-policy
spec:
  podSelector:
    matchLabels:
      app: celery-worker
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Celery workers don't accept inbound connections
  - from:
    - podSelector: {}
    ports: []
  egress:
  # Allow to Redis (Celery broker)
  - to:
    - podSelector:
        matchLabels:
          app: celery-redis
    ports:
    - protocol: TCP
      port: 6379
  # Allow to storage service
  - to:
    - podSelector:
        matchLabels:
          app: storage-service
    ports:
    - protocol: TCP
      port: 8082
  # Allow to dispatcher service
  - to:
    - podSelector:
        matchLabels:
          app: dispatcher
    ports:
    - protocol: TCP
      port: 8090
---
# Dispatcher service network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: dispatcher-network-policy
spec:
  podSelector:
    matchLabels:
      app: dispatcher
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow from API service
  - from:
    - podSelector:
        matchLabels:
          app: api-service
    ports:
    - protocol: TCP
      port: 8090
  # Allow from Celery workers
  - from:
    - podSelector:
        matchLabels:
          app: celery-worker
    ports:
    - protocol: TCP
      port: 8090
  egress:
  # Allow to Kubernetes API (for creating Jobs)
  - to:
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          component: kube-apiserver
    ports:
    - protocol: TCP
      port: 443
  # Alternative: Allow to Kubernetes API via service
  - to:
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 443
  # Allow to Redis (for status updates)
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379