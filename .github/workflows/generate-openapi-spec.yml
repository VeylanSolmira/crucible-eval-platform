name: Generate OpenAPI Spec

on:
  pull_request:
    paths:
      - 'api/**/*.py'
      - 'storage-service/**/*.py'
      - 'executor-service/**/*.py'
  workflow_dispatch:
  workflow_call:

jobs:
  generate-spec:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        pip install -r api/requirements.txt
        pip install -r storage-service/requirements.txt
        pip install -r executor-service/requirements.txt
    
    - name: Generate OpenAPI specs from all services
      run: |
        # Use shared script for DRY principle
        ./scripts/generate-all-openapi-specs.sh
    
    - name: Validate all OpenAPI specs
      run: |
        # Create a Python script to validate all specs
        cat > validate_specs.py << 'EOF'
        import yaml
        import json
        import sys
        
        services = ['api', 'storage-service', 'executor-service']
        all_valid = True
        
        for service in services:
            print(f"Validating {service}...")
            
            # Check YAML file
            yaml_path = f"{service}/openapi.yaml"
            json_path = f"{service}/openapi.json"
            
            try:
                # Validate YAML
                with open(yaml_path) as f:
                    yaml_spec = yaml.safe_load(f)
                
                # Validate JSON
                with open(json_path) as f:
                    json_spec = json.load(f)
                
                # Check required fields
                for spec in [yaml_spec, json_spec]:
                    if 'openapi' not in spec:
                        print(f"❌ Missing openapi field in {service}")
                        all_valid = False
                    if 'paths' not in spec:
                        print(f"❌ Missing paths field in {service}")
                        all_valid = False
                    if 'info' not in spec:
                        print(f"❌ Missing info field in {service}")
                        all_valid = False
                
                if all_valid:
                    print(f"✅ {yaml_spec['info']['title']} spec validated")
                    
            except FileNotFoundError as e:
                print(f"❌ Missing file: {e.filename}")
                all_valid = False
            except Exception as e:
                print(f"❌ Error validating {service}: {e}")
                all_valid = False
        
        sys.exit(0 if all_valid else 1)
        EOF
        
        python validate_specs.py
    
    - name: Upload all OpenAPI specs as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openapi-specs
        path: |
          api/openapi.yaml
          api/openapi.json
          storage-service/openapi.yaml
          storage-service/openapi.json
          executor-service/openapi.yaml
          executor-service/openapi.json
        retention-days: 7
    
    - name: Check if specs changed
      id: check-changes
      run: |
        # Check for changes in all services
        CHANGED=false
        
        for service in api storage-service executor-service; do
          if ! git diff --quiet $service/openapi.yaml $service/openapi.json; then
            CHANGED=true
            echo "⚠️ OpenAPI spec changed in $service"
            git diff --stat $service/openapi.yaml $service/openapi.json
          fi
        done
        
        if [ "$CHANGED" = "true" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "::warning::OpenAPI specs have changed. Please commit the updated specs."
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "✅ All OpenAPI specs are up to date"
        fi