name: Deploy Docker Compose Stack

on:
  # push:
  #   branches: [ main ]
  workflow_dispatch:
    inputs:
      deployment_color:
        description: 'Deployment color (blue or green)'
        required: false
        type: choice
        options:
          - blue
          - green

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-west-2' }}
  PROJECT_NAME: ${{ vars.PROJECT_NAME || 'crucible-platform' }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY || 'crucible-platform' }}

jobs:
  build:
    uses: ./.github/workflows/build-and-push.yml
    with:
      environment: production
    permissions:
      id-token: write
      contents: read
      actions: read
  
  setup:
    needs: build
    uses: ./.github/workflows/deploy-base.yml
    with:
      environment: production
      image-tag: ${{ needs.build.outputs.image-tag }}
    permissions:
      id-token: write
      contents: read
      
  deploy:
    needs: [build, setup]
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get deployment parameters
      id: params
      run: |
        # Determine deployment color
        DEPLOYMENT_COLOR="${{ github.event.inputs.deployment_color || vars.DEFAULT_DEPLOYMENT_TARGET || 'green' }}"
        echo "deployment_color=$DEPLOYMENT_COLOR" >> $GITHUB_OUTPUT
        echo "🎨 Deploying to $DEPLOYMENT_COLOR environment"
        
        # Find EC2 instances with the right tags
        INSTANCE_IDS=$(aws ec2 describe-instances \
          --filters \
            "Name=tag:Project,Values=${{ env.PROJECT_NAME }}" \
            "Name=tag:DeploymentColor,Values=$DEPLOYMENT_COLOR" \
            "Name=instance-state-name,Values=running" \
          --query "Reservations[*].Instances[*].InstanceId" \
          --output text)
        
        if [ -z "$INSTANCE_IDS" ]; then
          echo "❌ No EC2 instances found with Project=${{ env.PROJECT_NAME }} and DeploymentColor=$DEPLOYMENT_COLOR"
          exit 1
        fi
        
        echo "instance_ids=$INSTANCE_IDS" >> $GITHUB_OUTPUT
        echo "📡 Found instances: $INSTANCE_IDS"
    
    - name: Get database password
      id: secrets
      run: |
        DB_PASSWORD=$(aws secretsmanager get-secret-value \
          --secret-id "${{ env.PROJECT_NAME }}/db-password" \
          --query 'SecretString' \
          --output text)
        echo "::add-mask::$DB_PASSWORD"
        echo "db_password=$DB_PASSWORD" >> $GITHUB_OUTPUT
    
    - name: Prepare deployment files
      id: compose
      env:
        IMAGE_URLS: ${{ needs.setup.outputs.image-urls }}
      run: |
        # Parse image URLs from JSON
        echo "$IMAGE_URLS" | jq -r 'to_entries[] | "\(.key | ascii_upcase)_IMAGE=\(.value)"' > deploy.env
        
        # Add database password and legacy names
        cat >> deploy.env << EOF
        
        # Legacy names for compatibility
        BACKEND_IMAGE=$(echo "$IMAGE_URLS" | jq -r '.api')
        
        # Database
        DB_PASSWORD=${{ steps.secrets.outputs.db_password }}
        EOF
        
        # Show what we're deploying (without secrets)
        echo "📋 Deployment configuration:"
        grep -E "IMAGE=" deploy.env | sed 's/=.*/=***/'
        
        # Base64 encode files for safe transmission
        COMPOSE_B64=$(base64 -w 0 docker-compose.yml)
        COMPOSE_PROD_B64=$(base64 -w 0 docker-compose.prod.yml)
        ENV_B64=$(base64 -w 0 deploy.env)
        
        echo "compose_b64=$COMPOSE_B64" >> $GITHUB_OUTPUT
        echo "compose_prod_b64=$COMPOSE_PROD_B64" >> $GITHUB_OUTPUT
        echo "env_b64=$ENV_B64" >> $GITHUB_OUTPUT
    
    - name: Deploy to EC2 instances
      env:
        INSTANCE_IDS: ${{ steps.params.outputs.instance_ids }}
        COMPOSE_B64: ${{ steps.compose.outputs.compose_b64 }}
        COMPOSE_PROD_B64: ${{ steps.compose.outputs.compose_prod_b64 }}
        ENV_B64: ${{ steps.compose.outputs.env_b64 }}
      run: |
        echo "🚀 Deploying to instances: $INSTANCE_IDS"
        
        # Send deployment command via SSM
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids $INSTANCE_IDS \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "#!/bin/bash",
            "set -e",
            "",
            "# Navigate to project directory",
            "cd /home/ubuntu/crucible",
            "",
            "# Backup current configuration",
            "cp -f docker-compose.yml docker-compose.yml.backup 2>/dev/null || true",
            "cp -f .env .env.backup 2>/dev/null || true",
            "",
            "# Deploy new files",
            "echo \"'"$COMPOSE_B64"'\" | base64 -d > docker-compose.yml",
            "echo \"'"$COMPOSE_PROD_B64"'\" | base64 -d > docker-compose.prod.yml",
            "echo \"'"$ENV_B64"'\" | base64 -d > .env",
            "",
            "# Restart service (systemd handles pull, migrate, start)",
            "systemctl restart crucible-compose.service",
            "",
            "# Wait for service to stabilize",
            "sleep 10",
            "",
            "# Check service status",
            "systemctl is-active crucible-compose.service && echo \"✅ Service is running\" || echo \"❌ Service failed to start\"",
            "",
            "# Show running containers",
            "docker compose ps",
            "",
            "echo \"✅ Deployment complete\""
          ]' \
          --output text \
          --query 'Command.CommandId')
        
        echo "📋 SSM Command ID: $COMMAND_ID"
        echo "⏳ Waiting for deployment to complete..."
        
        # Wait for command to complete (timeout after 5 minutes)
        aws ssm wait command-executed \
          --command-id "$COMMAND_ID" \
          --instance-id $(echo $INSTANCE_IDS | awk '{print $1}') || true
        
        # Get command output
        STATUS=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id $(echo $INSTANCE_IDS | awk '{print $1}') \
          --query 'Status' \
          --output text)
        
        echo "📊 Deployment status: $STATUS"
        
        # Show command output
        echo "📄 Deployment output:"
        aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id $(echo $INSTANCE_IDS | awk '{print $1}') \
          --query 'StandardOutputContent' \
          --output text
        
        # Show errors if any
        if [ "$STATUS" != "Success" ]; then
          echo "❌ Deployment failed! Error output:"
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id $(echo $INSTANCE_IDS | awk '{print $1}') \
            --query 'StandardErrorContent' \
            --output text
          exit 1
        fi
    
    - name: Verify deployment
      if: success()
      run: |
        echo "🔍 Verifying deployment health..."
        
        # Get the first instance for health check
        INSTANCE_ID=$(echo ${{ steps.params.outputs.instance_ids }} | awk '{print $1}')
        
        # Check container status
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids $INSTANCE_ID \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "cd /home/ubuntu/crucible",
            "docker compose ps --format json"
          ]' \
          --output text \
          --query 'Command.CommandId')
        
        sleep 5
        
        CONTAINERS=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id $INSTANCE_ID \
          --query 'StandardOutputContent' \
          --output text)
        
        echo "📦 Container status:"
        echo "$CONTAINERS" | jq -r '. | "\\(.Name): \\(.State) (\\(.Status))"' 2>/dev/null || echo "$CONTAINERS"
        
        echo "✅ Deployment verification complete"