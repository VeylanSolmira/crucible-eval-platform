name: Deploy Docker Compose Stack

on:
  # push:
    # branches: [ main ]
  workflow_dispatch:
    inputs:
      deployment_color:
        description: 'Deployment color (blue or green)'
        required: false
        type: choice
        options:
          - blue
          - green

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-west-2' }}
  PROJECT_NAME: ${{ vars.PROJECT_NAME || 'crucible-platform' }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY || 'crucible-platform' }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    # Required for OIDC and artifact access
    permissions:
      id-token: write
      contents: read
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Check for fresh OpenAPI spec
      id: check-spec
      continue-on-error: true
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: generate-openapi-spec.yml
        name: openapi-spec
        path: api/
        search_artifacts: true
        if_no_artifact_found: warn
    
    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'
    
    - name: Build base image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build base image first (used by other services)
        docker build -t crucible-base -f base.Dockerfile .
        echo "✅ Built base image"
    
    - name: Build and push all service images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Note if we're using a fresh OpenAPI spec
        if [ -f "api/openapi.yaml" ] && [ "${{ steps.check-spec.outcome }}" == "success" ]; then
          echo "📋 Using fresh OpenAPI spec from artifact"
        else
          echo "📋 Using committed OpenAPI spec"
        fi
        
        # Build and push each service
        # Format: "service-name:dockerfile-path:build-context"
        # Most services use their directory as context, but api needs root for storage/
        services=(
          "nginx:nginx/Dockerfile:./nginx"
          "api:api/Dockerfile:."
          "frontend:frontend/Dockerfile:./frontend"
          "executor-service:executor-service/Dockerfile:./executor-service"
          "queue-service:queue-service/Dockerfile:./queue-service"
          "queue-worker:queue-worker/Dockerfile:./queue-worker"
          "storage-worker:storage-worker/Dockerfile:."
        )
        
        for service_info in "${services[@]}"; do
          IFS=':' read -r service_name dockerfile_path build_context <<< "$service_info"
          echo "🔨 Building $service_name using $dockerfile_path from context $build_context"
          
          # Build with base image arg if it's a Python service
          if [[ "$service_name" != "nginx" && "$service_name" != "frontend" ]]; then
            docker build --build-arg BASE_IMAGE=crucible-base -f $dockerfile_path -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$service_name-$IMAGE_TAG $build_context
          else
            docker build -f $dockerfile_path -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$service_name-$IMAGE_TAG $build_context
          fi
          
          # Tag as latest
          docker tag $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$service_name-$IMAGE_TAG $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$service_name-latest
          
          # Push both tags
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$service_name-$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$service_name-latest
          
          echo "✅ Pushed $service_name image"
        done
    
    - name: Update SSM parameters with new images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Store image URLs for all services
        services=(
          "nginx"
          "api"
          "frontend"
          "executor-service"
          "queue-service"
          "queue-worker"
          "storage-worker"
        )
        
        for service in "${services[@]}"; do
          aws ssm put-parameter \
            --name "/${{ env.PROJECT_NAME }}/$service-image" \
            --value "$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$service-$IMAGE_TAG" \
            --type String \
            --overwrite
          echo "📝 Stored $service image URL in SSM"
        done
        
        # Keep legacy parameter names for backward compatibility
        aws ssm put-parameter \
          --name "/${{ env.PROJECT_NAME }}/backend-image" \
          --value "$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:api-$IMAGE_TAG" \
          --type String \
          --overwrite
        
        echo "✅ Updated all SSM parameters with new images"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get deployment parameters
      id: params
      run: |
        # Determine deployment color (use repository variable as default)
        DEPLOYMENT_COLOR="${{ github.event.inputs.deployment_color || vars.DEFAULT_DEPLOYMENT_TARGET || 'green' }}"
        echo "deployment_color=$DEPLOYMENT_COLOR" >> $GITHUB_OUTPUT
        
        # Get all service image URLs from SSM
        services=(
          "nginx"
          "api"
          "frontend"
          "executor-service"
          "queue-service"
          "queue-worker"
          "storage-worker"
        )
        
        for service in "${services[@]}"; do
          IMAGE_URL=$(aws ssm get-parameter --name "/${{ env.PROJECT_NAME }}/$service-image" --query 'Parameter.Value' --output text)
          # Convert dashes to underscores for bash variable names
          VAR_NAME=$(echo "$service" | tr '-' '_')_image
          echo "${VAR_NAME}=$IMAGE_URL" >> $GITHUB_OUTPUT
        done
        
        # Legacy support
        BACKEND_IMAGE=$(aws ssm get-parameter --name "/${{ env.PROJECT_NAME }}/api-image" --query 'Parameter.Value' --output text)
        echo "backend_image=$BACKEND_IMAGE" >> $GITHUB_OUTPUT
        
        # Find EC2 instances
        INSTANCE_IDS=$(aws ec2 describe-instances \
          --filters \
            "Name=tag:Project,Values=${{ env.PROJECT_NAME }}" \
            "Name=tag:DeploymentColor,Values=$DEPLOYMENT_COLOR" \
            "Name=instance-state-name,Values=running" \
          --query "Reservations[*].Instances[*].InstanceId" \
          --output text)
        
        if [ -z "$INSTANCE_IDS" ]; then
          echo "❌ No EC2 instances found with Project=${{ env.PROJECT_NAME }} and DeploymentColor=$DEPLOYMENT_COLOR"
          exit 1
        fi
        
        echo "instance_ids=$INSTANCE_IDS" >> $GITHUB_OUTPUT
        echo "📡 Found instances: $INSTANCE_IDS"
    
    - name: Get database password from Secrets Manager
      id: secrets
      run: |
        DB_PASSWORD=$(aws secretsmanager get-secret-value \
          --secret-id "${{ env.PROJECT_NAME }}/db-password" \
          --query 'SecretString' \
          --output text)
        echo "::add-mask::$DB_PASSWORD"
        echo "db_password=$DB_PASSWORD" >> $GITHUB_OUTPUT
    
    - name: Prepare deployment files
      id: compose
      run: |
        # Create .env file with all service image URLs
        cat > deploy.env << EOF
        # Service Images
        NGINX_IMAGE=${{ steps.params.outputs.nginx_image }}
        API_IMAGE=${{ steps.params.outputs.api_image }}
        FRONTEND_IMAGE=${{ steps.params.outputs.frontend_image }}
        EXECUTOR_SERVICE_IMAGE=${{ steps.params.outputs.executor_service_image }}
        QUEUE_SERVICE_IMAGE=${{ steps.params.outputs.queue_service_image }}
        QUEUE_WORKER_IMAGE=${{ steps.params.outputs.queue_worker_image }}
        STORAGE_WORKER_IMAGE=${{ steps.params.outputs.storage_worker_image }}
        
        # Legacy names for compatibility
        BACKEND_IMAGE=${{ steps.params.outputs.api_image }}
        
        # Database
        DB_PASSWORD=${{ steps.secrets.outputs.db_password }}
        EOF
        
        # Base64 encode files for safe transmission
        COMPOSE_B64=$(base64 -w 0 docker-compose.yml)
        COMPOSE_PROD_B64=$(base64 -w 0 docker-compose.prod.yml)
        ENV_B64=$(base64 -w 0 deploy.env)
        echo "compose_b64=$COMPOSE_B64" >> $GITHUB_OUTPUT
        echo "compose_prod_b64=$COMPOSE_PROD_B64" >> $GITHUB_OUTPUT
        echo "env_b64=$ENV_B64" >> $GITHUB_OUTPUT
    
    - name: Deploy to EC2 instances
      env:
        INSTANCE_IDS: ${{ steps.params.outputs.instance_ids }}
        COMPOSE_B64: ${{ steps.compose.outputs.compose_b64 }}
        COMPOSE_PROD_B64: ${{ steps.compose.outputs.compose_prod_b64 }}
        ENV_B64: ${{ steps.compose.outputs.env_b64 }}
      run: |
        # Send deployment command
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids $INSTANCE_IDS \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "#!/bin/bash",
            "set -e",
            "cd /home/ubuntu/crucible",
            "",
            "# Deploy new files",
            "echo \"'"$COMPOSE_B64"'\" | base64 -d > docker-compose.yml",
            "echo \"'"$COMPOSE_PROD_B64"'\" | base64 -d > docker-compose.prod.yml",
            "echo \"'"$ENV_B64"'\" | base64 -d > .env",
            "",
            "# Restart service (systemd handles pull, migrate, start)",
            "systemctl restart crucible-compose.service",
            "echo \"✅ Deployment complete\""
          ]' \
          --output text \
          --query 'Command.CommandId')
        
        echo "📋 SSM Command ID: $COMMAND_ID"
        echo "⏳ Waiting for deployment to complete..."
        
        # Wait for command to complete
        aws ssm wait command-executed \
          --command-id "$COMMAND_ID" \
          --instance-id $(echo $INSTANCE_IDS | awk '{print $1}') || true
        
        # Get command output
        echo "📄 Deployment output:"
        aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id $(echo $INSTANCE_IDS | awk '{print $1}') \
          --query '[Status,StandardOutputContent]' \
          --output text