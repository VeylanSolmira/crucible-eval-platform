name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_suites:
        description: 'Test suites to run (space-separated: unit integration e2e security performance)'
        required: false
        default: 'unit integration'
      parallel:
        description: 'Run tests in parallel'
        required: false
        default: true
        type: boolean
      include_slow:
        description: 'Include slow tests'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-west-2' }}
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY || '503132503803.dkr.ecr.us-west-2.amazonaws.com' }}

jobs:
  test:
    name: Run Test Suite
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # For OIDC
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          role-session-name: GitHub-Actions-Test-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.29.0'
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name crucible-platform
      
      - name: Run test orchestrator
        id: run-tests
        env:
          # Test configuration
          K8S_NAMESPACE: dev
          PRODUCTION_MODE: "true"  # Not needed with auto-detection, but explicit is good
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          IMAGE_PULL_POLICY: Always  # Always pull in CI to ensure latest
          GITHUB_SHA: ${{ github.sha }}
          
          # Test runner will use unique tag based on commit SHA
          # This ensures we're always testing the exact code version
        run: |
          # Parse test suites input
          SUITES="${{ github.event.inputs.test_suites || 'unit integration' }}"
          
          # Build command
          CMD="python tests/test_orchestrator.py $SUITES"
          
          # Add flags based on inputs
          if [ "${{ github.event.inputs.parallel || 'true' }}" == "true" ]; then
            CMD="$CMD --parallel"
          fi
          
          if [ "${{ github.event.inputs.include_slow }}" == "true" ]; then
            CMD="$CMD --include-slow"
          fi
          
          # Execute test orchestrator
          echo "Running: $CMD"
          $CMD
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ github.sha }}
          path: |
            test-results-*/
            coverage/
            *.log
          retention-days: 7
      
      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Look for test results
            const resultsFiles = fs.readdirSync('.')
              .filter(f => f.startsWith('test-results-'))
              .map(dir => {
                const logFile = `${dir}/coordinator.log`;
                if (fs.existsSync(logFile)) {
                  return fs.readFileSync(logFile, 'utf8');
                }
                return null;
              })
              .filter(Boolean);
            
            if (resultsFiles.length > 0) {
              // Extract test summary from logs
              const log = resultsFiles[0];
              const summaryMatch = log.match(/TEST SUMMARY[\s\S]*?(?=\n\n|\n={80}|$)/);
              const summary = summaryMatch ? summaryMatch[0] : 'Test results available in artifacts';
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## Test Results for ${context.sha.substring(0, 8)}\n\n\`\`\`\n${summary}\n\`\`\`\n\n[View full results](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
              });
            }
      
      - name: Cleanup test resources
        if: always()
        run: |
          # Clean up any test jobs that might still be running
          kubectl delete jobs -n dev -l test-run=${{ github.run_id }} --ignore-not-found=true || true
          
          # Clean up old test coordinator jobs (older than 24 hours)
          kubectl get jobs -n dev -o json | \
            jq -r '.items[] | select(.metadata.name | startswith("test-coordinator-")) | 
            select(.metadata.creationTimestamp | fromdateiso8601 < (now - 86400)) | 
            .metadata.name' | \
            xargs -I {} kubectl delete job {} -n dev --ignore-not-found=true || true

  # Optional: Run quick smoke tests on every push
  smoke-test:
    name: Smoke Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref != 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt
      
      - name: Run local smoke tests
        run: |
          # Run basic unit tests locally without cluster
          python -m pytest tests/unit/test_smoke.py -v || true