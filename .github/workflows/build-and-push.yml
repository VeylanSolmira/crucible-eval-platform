name: Build and Push Images

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: false
        type: string
        default: 'production'
  workflow_call:
    inputs:
      environment:
        description: 'Target environment'
        required: false
        type: string
        default: 'production'
    outputs:
      image-tag:
        description: 'The image tag (git SHA)'
        value: ${{ jobs.build.outputs.image-tag }}

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-west-2' }}
  ECR_REGISTRY: 503132503803.dkr.ecr.us-west-2.amazonaws.com

jobs:
  generate-specs:
    uses: ./.github/workflows/generate-openapi-spec.yml
  
  build:
    needs: generate-specs
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.meta.outputs.image-tag }}
    
    permissions:
      id-token: write
      contents: read
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set image tag
      id: meta
      run: |
        # Use environment name as tag (dev, staging, production)
        # Default to 'dev' if not specified
        TAG="${{ inputs.environment }}"
        if [[ -z "$TAG" ]]; then
          TAG="dev"
        fi
        echo "image-tag=$TAG" >> $GITHUB_OUTPUT
    
    - name: Download OpenAPI specs
      uses: actions/download-artifact@v4
      with:
        name: openapi-specs
        path: ./
    
    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push base image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        TAG: ${{ steps.meta.outputs.image-tag }}
      run: |
        echo "ðŸ”¨ Building base image for AMD64..."
        TAG=$TAG docker buildx bake \
          -f docker-compose.build.yml \
          --set '*.platform=linux/amd64' \
          --push \
          base
        echo "âœ… Built and pushed base image"
    
    - name: Build and push all service images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        TAG: ${{ steps.meta.outputs.image-tag }}
      run: |
        echo "ðŸ“‹ Using OpenAPI specs from generate-openapi-spec workflow"
        echo "ðŸ”¨ Building all other images for AMD64..."
        
        # Build all services using docker buildx bake (builds in parallel)
        TAG=$TAG docker buildx bake \
          -f docker-compose.build.yml \
          --set '*.platform=linux/amd64' \
          --push
        
        echo "âœ… All images built and pushed with tag: $TAG"
    
