name: Deploy Docker Container

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-west-2

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    # Required for OIDC
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: crucible-platform
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build the Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push both tags
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "‚úÖ Pushed image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Update SSM parameter with new image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: crucible-platform
        IMAGE_TAG: ${{ github.sha }}
      run: |
        aws ssm put-parameter \
          --name "/crucible/docker-image" \
          --value "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
          --type String \
          --overwrite
        
        echo "üìù Updated SSM parameter with new image"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to EC2 instances
      run: |
        # Find EC2 instances
        INSTANCE_IDS=$(aws ec2 describe-instances \
          --filters "Name=tag:Project,Values=crucible" "Name=instance-state-name,Values=running" \
          --query "Reservations[*].Instances[*].InstanceId" \
          --output text)
        
        if [ -z "$INSTANCE_IDS" ]; then
          echo "‚ùå No EC2 instances found with Project=crucible tag"
          exit 1
        fi
        
        echo "üì° Deploying to instances: $INSTANCE_IDS"
        
        # Get Docker image from SSM
        DOCKER_IMAGE=$(aws ssm get-parameter --name "/crucible/docker-image" --query 'Parameter.Value' --output text)
        echo "üê≥ Deploying Docker image: $DOCKER_IMAGE"
        
        # Send command to update and restart container
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids $INSTANCE_IDS \
          --document-name "AWS-RunShellScript" \
          --parameters '{"commands":[
            "#!/bin/bash",
            "set -e",
            "echo \"üöÄ Starting Docker deployment\"",
            "",
            "# Login to ECR",
            "aws ecr get-login-password --region '$AWS_REGION' | docker login --username AWS --password-stdin $(echo '$DOCKER_IMAGE' | cut -d/ -f1)",
            "",
            "# Pull new image",
            "docker pull '$DOCKER_IMAGE'",
            "",
            "# Stop existing container",
            "docker stop crucible-platform || true",
            "docker rm crucible-platform || true",
            "",
            "# Run new container",
            "docker run -d \\",
            "  --name crucible-platform \\",
            "  --restart unless-stopped \\",
            "  -p 8080:8080 \\",
            "  -v /var/run/docker.sock:/var/run/docker.sock \\",
            "  -v /home/ubuntu/storage:/app/storage \\",
            "  -e PYTHONUNBUFFERED=1 \\",
            "  -e DOCKER_HOST=unix:///var/run/docker.sock \\",
            "  -e BIND_HOST=0.0.0.0 \\",
            "  -e HOST_PWD=/home/ubuntu \\",
            "  '$DOCKER_IMAGE'",
            "",
            "# Check status",
            "sleep 5",
            "if docker ps | grep -q crucible-platform; then",
            "  echo \"‚úÖ Container started successfully\"",
            "  docker logs crucible-platform --tail 20",
            "else",
            "  echo \"‚ùå Container failed to start\"",
            "  docker logs crucible-platform",
            "  exit 1",
            "fi"
          ]}' \
          --output text \
          --query 'Command.CommandId')
        
        echo "üìã SSM Command ID: $COMMAND_ID"
        echo "‚è≥ Waiting for deployment to complete..."
        
        # Wait for command to complete
        aws ssm wait command-executed \
          --command-id "$COMMAND_ID" \
          --instance-id $(echo $INSTANCE_IDS | awk '{print $1}')
        
        # Get command output
        aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id $(echo $INSTANCE_IDS | awk '{print $1}') \
          --query '[Status,StandardOutputContent]' \
          --output text