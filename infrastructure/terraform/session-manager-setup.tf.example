# session-manager-setup.tf.example
# Example implementation for Session Manager access to private EC2 instances

# 1. Create VPC with public and private subnets
resource "aws_vpc" "main" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name = "crucible-vpc"
  }
}

# 2. Public subnet for NAT Gateway
resource "aws_subnet" "public" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = data.aws_availability_zones.available.names[0]
  map_public_ip_on_launch = true

  tags = {
    Name = "crucible-public-subnet"
  }
}

# 3. Private subnet for EC2 instances
resource "aws_subnet" "private" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = "10.0.2.0/24"
  availability_zone = data.aws_availability_zones.available.names[0]

  tags = {
    Name = "crucible-private-subnet"
  }
}

# 4. Internet Gateway for public subnet
resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "crucible-igw"
  }
}

# 5. Elastic IP for NAT Gateway
resource "aws_eip" "nat" {
  domain = "vpc"

  tags = {
    Name = "crucible-nat-eip"
  }
}

# 6. NAT Gateway for private subnet outbound traffic
resource "aws_nat_gateway" "main" {
  allocation_id = aws_eip.nat.id
  subnet_id     = aws_subnet.public.id

  tags = {
    Name = "crucible-nat-gateway"
  }
}

# 7. Route tables
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main.id
  }

  tags = {
    Name = "crucible-public-rt"
  }
}

resource "aws_route_table" "private" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.main.id
  }

  tags = {
    Name = "crucible-private-rt"
  }
}

# 8. Route table associations
resource "aws_route_table_association" "public" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.public.id
}

resource "aws_route_table_association" "private" {
  subnet_id      = aws_subnet.private.id
  route_table_id = aws_route_table.private.id
}

# 9. IAM role for EC2 with Session Manager
resource "aws_iam_role" "ec2_ssm_role" {
  name = "crucible-ec2-ssm-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "ec2.amazonaws.com"
      }
    }]
  })
}

# 10. Attach SSM policy to role
resource "aws_iam_role_policy_attachment" "ssm_managed_instance_core" {
  role       = aws_iam_role.ec2_ssm_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
}

# 11. Instance profile
resource "aws_iam_instance_profile" "ec2_ssm_profile" {
  name = "crucible-ec2-ssm-profile"
  role = aws_iam_role.ec2_ssm_role.name
}

# 12. Security group for private instance (minimal)
resource "aws_security_group" "private_instance" {
  name        = "crucible-private-instance-sg"
  description = "Security group for private instances accessed via SSM"
  vpc_id      = aws_vpc.main.id

  # No ingress rules needed! Session Manager doesn't use SSH

  # Allow all outbound
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "crucible-private-sg"
  }
}

# 13. EC2 instance in private subnet
resource "aws_instance" "private_eval_server" {
  ami                    = data.aws_ami.ubuntu.id
  instance_type          = "t2.micro"
  subnet_id              = aws_subnet.private.id
  iam_instance_profile   = aws_iam_instance_profile.ec2_ssm_profile.name
  vpc_security_group_ids = [aws_security_group.private_instance.id]

  # No key_name needed! Access is via Session Manager

  root_block_device {
    volume_size = 30
    volume_type = "gp3"
  }

  user_data = <<-EOF
    #!/bin/bash
    # Standard setup...
    ${file("${path.module}/user_data.sh")}
    
    # Ensure SSM agent is running (pre-installed on Ubuntu)
    snap start amazon-ssm-agent
  EOF

  tags = {
    Name = "crucible-eval-server-private"
  }
}

# 14. Outputs
output "instance_id" {
  value       = aws_instance.private_eval_server.id
  description = "Instance ID for Session Manager access"
}

output "ssm_connect_command" {
  value       = "aws ssm start-session --target ${aws_instance.private_eval_server.id}"
  description = "Command to connect via Session Manager"
}

# Usage:
# 1. Deploy: tofu apply
# 2. Connect: aws ssm start-session --target i-xxxxx
# 3. No SSH keys, no public IPs, no security group rules for SSH!