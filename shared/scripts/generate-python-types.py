#!/usr/bin/env python3
"""
Generate Python types from shared OpenAPI schemas.
This ensures all services use the same type definitions.
"""

import yaml
import os
from pathlib import Path

def generate_enum_from_yaml(yaml_file: Path, output_file: Path):
    """Generate Python enum from OpenAPI YAML schema."""
    with open(yaml_file, 'r') as f:
        spec = yaml.safe_load(f)
    
    # Extract the EvaluationStatus schema
    status_schema = spec['components']['schemas']['EvaluationStatus']
    enum_values = status_schema['enum']
    description = status_schema.get('description', '')
    
    # Generate Python code
    code = f'''"""
Generated from {yaml_file.name}
DO NOT EDIT THIS FILE DIRECTLY - Edit the source YAML instead
"""
from enum import Enum

class EvaluationStatus(str, Enum):
    """
    {description}
    
    Generated from: shared/types/evaluation-status.yaml
    """
'''
    
    # Add enum values with comments from YAML
    for value in enum_values:
        # Extract comment from YAML if present
        comment = ""
        with open(yaml_file, 'r') as f:
            lines = f.readlines()
            for i, line in enumerate(lines):
                if f'- {value}' in line and '#' in line:
                    comment = line.split('#')[1].strip()
                    break
        
        const_name = value.upper()
        if comment:
            code += f'    {const_name} = "{value}"  # {comment}\n'
        else:
            code += f'    {const_name} = "{value}"\n'
    
    # Write the generated code
    output_file.parent.mkdir(parents=True, exist_ok=True)
    with open(output_file, 'w') as f:
        f.write(code)
    
    print(f"Generated {output_file}")

def main():
    # Get the shared directory path
    script_dir = Path(__file__).parent
    shared_dir = script_dir.parent
    
    # Generate EvaluationStatus enum
    generate_enum_from_yaml(
        yaml_file=shared_dir / 'types' / 'evaluation-status.yaml',
        output_file=shared_dir / 'generated' / 'python' / 'evaluation_status.py'
    )
    
    # TODO: Add generation for other shared types as they're created
    # - Event contracts
    # - Core models
    # - etc.

if __name__ == '__main__':
    main()