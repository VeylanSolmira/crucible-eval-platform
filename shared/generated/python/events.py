"""
Generated from event-contracts.yaml
DO NOT EDIT THIS FILE DIRECTLY - Edit the source YAML instead
"""
from datetime import datetime
from typing import Optional, Dict, Any, Literal
from pydantic import BaseModel, Field


class EvaluationQueuedEvent(BaseModel):
    """
    Fields:
        eval_id: The evaluation identifier
        code: Python code to execute
        language: Programming language (currently only python supported)
        metadata: Additional metadata for the evaluation"""
    eval_id: str = Field(..., description="The evaluation identifier")
    code: str = Field(..., description="Python code to execute")
    language: Optional[str] = Field(default='python', description="Programming language (currently only python supported)")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Additional metadata for the evaluation")


class EvaluationRunningEvent(BaseModel):
    """
    Fields:
        eval_id: The evaluation identifier
        executor_id: ID of the executor service handling this evaluation
        container_id: Docker container ID where code is running
        timeout: Execution timeout in seconds"""
    eval_id: str = Field(..., description="The evaluation identifier")
    executor_id: str = Field(..., description="ID of the executor service handling this evaluation")
    container_id: str = Field(..., description="Docker container ID where code is running")
    timeout: Optional[int] = Field(default=30, description="Execution timeout in seconds")


class EvaluationCompletedEvent(BaseModel):
    """
    Fields:
        eval_id: The evaluation identifier
        status: Final status based on exit code
        output: Standard output from the evaluation
        error: Standard error from the evaluation
        exit_code: Process exit code (0=success, 124=timeout, other=error)
        executor_id: ID of the executor that ran this
        completed_at: ISO timestamp of completion"""
    eval_id: str = Field(..., description="The evaluation identifier")
    status: Literal["completed", "failed", "timeout"] = Field(..., description="Final status based on exit code")
    output: Optional[str] = Field(default=None, description="Standard output from the evaluation")
    error: Optional[str] = Field(default=None, description="Standard error from the evaluation")
    exit_code: int = Field(..., description="Process exit code (0=success, 124=timeout, other=error)")
    executor_id: str = Field(..., description="ID of the executor that ran this")
    completed_at: datetime = Field(..., description="ISO timestamp of completion")


class EvaluationFailedEvent(BaseModel):
    """
    Fields:
        eval_id: The evaluation identifier
        error: Error message explaining the failure
        executor_id: ID of executor if failure occurred during execution"""
    eval_id: str = Field(..., description="The evaluation identifier")
    error: str = Field(..., description="Error message explaining the failure")
    executor_id: Optional[str] = Field(default=None, description="ID of executor if failure occurred during execution")


class EvaluationEvent(BaseModel):
    """Generic event in evaluation lifecycle
    
    Fields:
        id: Event ID (if stored in database)
        evaluation_id: The evaluation this event belongs to
        timestamp: When the event occurred
        event_type: Type of event (e.g., status_change, output_update)
        message: Human-readable event message
        metadata: Additional event-specific data"""
    id: Optional[int] = Field(default=None, description="Event ID (if stored in database)")
    evaluation_id: str = Field(..., description="The evaluation this event belongs to")
    timestamp: datetime = Field(..., description="When the event occurred")
    event_type: str = Field(..., description="Type of event (e.g., status_change, output_update)")
    message: str = Field(..., description="Human-readable event message")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Additional event-specific data")



# Event channel names
class EventChannels:
    """Redis pub/sub channel names"""
    EVALUATION_QUEUED = "evaluation:queued"
    EVALUATION_STARTED = "evaluation:started"
    EVALUATION_COMPLETED = "evaluation:completed"
    EVALUATION_FAILED = "evaluation:failed"
    EXECUTOR_HEALTH = "executor:health"
    QUEUE_STATS = "queue:stats"
