"""
EXAMPLE: How security-scanner could work as a standalone microservice

This file shows how to wrap the security-scanner in a REST API for
microservice deployment. Currently, this component is used directly 
by the monolithic platform.

To use this example:
1. Install dependencies: pip install fastapi uvicorn
2. Rename to main.py
3. Run: uvicorn main:app --reload
4. Access API at: http://localhost:8000/docs

Note: The monolithic platform (src/platform/) doesn't use this file.
"""

"""Security Scanner Service - Runs security scenarios against execution engines"""
from fastapi import FastAPI, BackgroundTasks
from scenarios.security_runner import SecurityTestRunner
from scenarios.safe_demo_scenarios import SAFE_DEMO_SCENARIOS
from scenarios.attack_scenarios import ATTACK_SCENARIOS

app = FastAPI(title="Security Scanner Service")

@app.post("/scan/demo")
async def run_demo_scan(background_tasks: BackgroundTasks):
    """Run safe demo security scan"""
    def run_scan():
        runner = SecurityTestRunner(scenarios=SAFE_DEMO_SCENARIOS, include_subprocess=True)
        runner.run_all_scenarios()
    
    background_tasks.add_task(run_scan)
    return {"status": "Demo scan started"}

@app.post("/scan/full")
async def run_full_scan(background_tasks: BackgroundTasks):
    """Run full security scan (dangerous!)"""
    def run_scan():
        runner = SecurityTestRunner(scenarios=ATTACK_SCENARIOS, include_subprocess=False)
        runner.run_all_scenarios()
    
    background_tasks.add_task(run_scan)
    return {"status": "Full scan started", "warning": "This runs real attacks!"}

@app.get("/health")
async def health_check():
    return {"status": "healthy", "service": "Security Scanner"}
