"""
EXAMPLE: How execution-engine could work as a standalone microservice

This file shows how to wrap the execution-engine in a REST API for
microservice deployment. Currently, this component is used directly 
by the monolithic platform.

To use this example:
1. Install dependencies: pip install fastapi uvicorn
2. Rename to main.py
3. Run: uvicorn main:app --reload
4. Access API at: http://localhost:8000/docs

Note: The monolithic platform (src/platform/) doesn't use this file.
"""

"""Execution Engine Service - Handles code execution in isolated environments"""
import os
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Optional
from engines import SubprocessEngine, DockerEngine, GVisorEngine

app = FastAPI(title="Execution Engine Service")

# Initialize engine based on environment
ENGINE_TYPE = os.environ.get('ENGINE_TYPE', 'docker')
if ENGINE_TYPE == 'subprocess':
    engine = SubprocessEngine()
elif ENGINE_TYPE == 'gvisor':
    engine = GVisorEngine()
else:
    engine = DockerEngine()


class ExecutionRequest(BaseModel):
    code: str
    eval_id: str
    timeout: Optional[int] = 30


@app.post("/execute")
async def execute_code(request: ExecutionRequest):
    """Execute code in isolated environment"""
    try:
        result = engine.execute(request.code, request.eval_id)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/health")
async def health_check():
    """Health check endpoint"""
    test_result = engine.self_test()
    return {
        "status": "healthy" if test_result['passed'] else "unhealthy",
        "engine": ENGINE_TYPE,
        "test": test_result
    }
